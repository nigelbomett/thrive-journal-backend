import { DataTypes, Model, Optional } from "sequelize";
import { sequelize } from "../config/db";

var bcrypt = require('bcryptjs');

interface UserAttributes{
    id: number;
    username: string;
    email: string;
    password_hash: string //Encrypted password
}

interface UserCreationAttributes extends Optional<UserAttributes,'id'>{} //property id is autogenerated in the database

export class User extends Model<UserAttributes,UserCreationAttributes> implements UserAttributes{
    public id!:number;
    public username!: string;
    public email!: string;
    public password_hash!: string;

    public readonly createdAt!: Date;
    public readonly updatedAt!: Date;
}

User.init(
    {
        id:{
            type:DataTypes.INTEGER.UNSIGNED,
            autoIncrement:true,
            primaryKey:true
        },
        username:{
            type: DataTypes.STRING(128),
            allowNull: false,
        },
        email: {
            type: DataTypes.STRING(128),
            allowNull:false
        },
        password_hash: {
            type: DataTypes.STRING(128),
            allowNull: false
        }
    },
        //options
        {
            tableName: 'users',
            sequelize,
            hooks: { //encrypt password before saving user
                beforeCreate: (user) => {
                    user.password_hash = bcrypt.hashSync(user.password_hash,8);
                }
            }
        }
);